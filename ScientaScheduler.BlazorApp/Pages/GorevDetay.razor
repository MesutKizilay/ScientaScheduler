@page "/gorevdetay/{id:int}"
@inject ITaskService taskService
@using System.IO
@inject IConfiguration configuration

<EditForm Model="@taskDto">

    <h3>Görev Detay</h3>
    <hr />

    <div class="form-group row">
        <label for="ID" class="col-sm-2 col-form-label">
            Gorev ID
        </label>
        <div>
            <SfTextBox class="form-control" Value="@taskDto.ID0.ToString()" Readonly="true"></SfTextBox>
            @*<InputNumber class="form-control" @bind-Value="TaskDto.ID" />*@
        </div>
    </div>
    @*<div class="form-group row">
            <label for="ID" class="col-sm-2 col-form-label">
                Proje Adı
            </label>
            <div>
                <SfTextBox class="form-control" @bind-Value="taskDto.ProjeAdi" />
            </div>
        </div>*@
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Proje Kodu
        </label>
        <div>
            <SfTextBox class="form-control" Value="@taskDto.PYProjeKoduID.ToString()" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Konu
        </label>
        <div>
            <SfTextBox class="form-control" @bind-Value="taskDto.Konu" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Görev Başlama Tarihi
        </label>
        <div>
            <SfDatePicker class="form-control" @bind-Value="taskDto.PlanlananBaslamaTarihi" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Görev Bitiş Tarihi
        </label>
        <div>
            <SfDatePicker class="form-control" @bind-Value="taskDto.PlanlananBitisTarihi" />
        </div>
    </div>
    <!--<div class="form-group row">
        <label class="col-sm-2 col-form-label">
            Süreç
        </label>
        <div>-->
    @*<SfTextBox class="form-control" Value="@taskDto.Sure.ToString()" />*@
    <!--</div>
    </div>-->
    <SfButton OnClick="GetValue" ID="toast_type">Güncelle</SfButton>
    <SfToast Content="@ToastContent" @ref="sfToast" Timeout="2500" ShowCloseButton="true">
        <ToastPosition X="Right" Y="Top"></ToastPosition>
    </SfToast>

</EditForm>
<InputFile OnChange="@LoadFiles" class="form-control" multiple accept=".png,.jpg,.jpeg" />

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

<table style="width:100%">
    <tr>
        <th>Görev Id</th>
        <th>Proje Kodu</th>
        <th>Konu</th>
        <th>Görev Başlama Tarihi </th>
        <th>Göre Bitiş Tarihi</th>
        @*<th>Süre</th>*@
    </tr>
    <tr>
        <td>@taskDto.ID0</td>
        <td>@taskDto.PYProjeKoduID</td>
        <td>@taskDto.Konu</td>
        <td>@taskDto.PlanlananBaslamaTarihi</td>
        <td>@taskDto.PlanlananBitisTarihi</td>
        @*<td>@taskDto.Sure</td>*@
    </tr>
</table>

<style>
    table, th, td {
        border: 1px solid black;
    }
</style>

@code{
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 3;
    private List<string> errors = new List<string>();


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files,but only {maxAllowedFiles} are allowed");
            return;
        }
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

                string path = Path.Combine(configuration.GetValue<string>("FileStorage")!, "mc", newFileName);

                Directory.CreateDirectory(Path.Combine(configuration.GetValue<string>("FileStorage")!, "mc"));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                errors.Add($"File:{file.Name} Error:{ex.Message}");
            }
        }
    }
}

@code {

    protected override async Task OnInitializedAsync()
    {
        var result = await taskService.GetActiveTaskList();
        //var result = await taskService.GetTaskById(id);
        taskDto = result.SingleOrDefault(t => t.ID0 == id);
    }

    public async Task GetValue()
    {
        StatusCode = Convert.ToInt32(await taskService.UpdateTask(taskDto));
        if (StatusCode == 200)
        {
            await this.sfToast.ShowAsync(Toast[1]);
        }
        else
        {
            await this.sfToast.ShowAsync(Toast[0]);
        }
    }
}

@code{
    SfToast sfToast;
    public TaskDto taskDto = new TaskDto();
    private string ToastContent { get; set; }
    private int StatusCode { get; set; }

    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Uyarı!", Content="Proje güncellenirken bir sorun oluştu", CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Başarılı!", Content="Proje başarıyla güncellendi", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content="A problem occurred while submitting your data.", CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content="Please read the comments carefully.", CssClass="e-toast-info", Icon="e-info toast-icons" }
    };

    [Parameter]
    public int id { get; set; }
}