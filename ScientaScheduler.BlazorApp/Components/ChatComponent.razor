@using Microsoft.Extensions.Configuration;
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@implements IAsyncDisposable

<h3>SignalR Chat</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name ?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea  style="width:100%; height:500px" readonly>
        @messages
    </textarea>
    <div class="input-group">
        <SfTextBox @ref="@TextBoxSendObj" Created="@OnCreateSend" Enabled="@IsConnected" @bind-Value="message" @onkeyup='@(e => HandleInput(e))'></SfTextBox>
    </div>
}

<style>
    .e-search-icon::before {
        content: '\e71d';
        font-family: e-icons;
    }

    .e-date-icon::before {
        content: '\e901';
        font-family: e-icons;
    }
</style>

@code {
    private HubConnection hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;

    SfTextBox TextBoxSendObj;

    public async Task OnCreateSend()
    {
        var Click = EventCallback.Factory.Create<MouseEventArgs>(this, SendClick);
        await TextBoxSendObj.AddIcon("append", "e-search-icon", new Dictionary<string, object>() { { "onclick", Click } });
    }

    public async Task SendClick()
    {
        await Send();
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(configuration["SchedulerBusinessSettings:BaseUrl"] + $"/chathub?username={username}").Build();
        hubConnection.On<string, string>("ReceivedChatMessage",(user,message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("SendChatMessage", username, message);
            message = string.Empty;
            StateHasChanged();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
}
