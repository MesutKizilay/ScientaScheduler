@using Microsoft.Extensions.Configuration;
@inject NavigationManager navigationManager
@inject IConfiguration configuration
@implements IAsyncDisposable

<h3>SignalR Chat</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name ?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea  style="width:100%; height:500px">
        @messages
    </textarea>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
}

@code {
    private HubConnection hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder().WithUrl("http://localhost:7000/chathub").Build();
        hubConnection.On<string, string>("ReceivedChatMessage",(user,message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("SendChatMessage", username, message);
            message = string.Empty;
            StateHasChanged();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
}
